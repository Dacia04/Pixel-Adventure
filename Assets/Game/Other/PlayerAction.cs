//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Game/Other/PlayerAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerAction"",
    ""maps"": [
        {
            ""name"": ""Key_Board"",
            ""id"": ""4a559d83-be0c-498f-a701-b5b69ba43f48"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""84e58bd7-95ce-4965-9190-967c274956d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""40db7870-3cab-4cd3-abb8-69f70b43a907"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""WallClimb"",
                    ""type"": ""Value"",
                    ""id"": ""874ca365-fa2f-4fd8-ae0d-442fac6084aa"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""WallClimbCondition"",
                    ""type"": ""Value"",
                    ""id"": ""1e73f88c-5858-4f52-959b-cd5a606f8d0d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""048b7b0b-e114-4697-8daa-1a0a74c697f6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""41ae3644-39f8-4c51-b768-a57bcee34a8f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""291e9fa4-c598-4a81-bb94-7a936fdc80b1"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b02002ba-d409-47dd-94d7-dabb65621ef1"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9073afba-f047-4255-8c53-c8ec8903c523"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WallClimb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""bd1516f3-7c02-481d-86ff-9975f33d008e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WallClimbCondition"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5d90e5e5-b324-43bf-8a4c-220e20651fed"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WallClimbCondition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6b4b7323-7c3a-4ccb-b72b-b6cb71d7ce83"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WallClimbCondition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Key_Board
        m_Key_Board = asset.FindActionMap("Key_Board", throwIfNotFound: true);
        m_Key_Board_Jump = m_Key_Board.FindAction("Jump", throwIfNotFound: true);
        m_Key_Board_Movement = m_Key_Board.FindAction("Movement", throwIfNotFound: true);
        m_Key_Board_WallClimb = m_Key_Board.FindAction("WallClimb", throwIfNotFound: true);
        m_Key_Board_WallClimbCondition = m_Key_Board.FindAction("WallClimbCondition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Key_Board
    private readonly InputActionMap m_Key_Board;
    private List<IKey_BoardActions> m_Key_BoardActionsCallbackInterfaces = new List<IKey_BoardActions>();
    private readonly InputAction m_Key_Board_Jump;
    private readonly InputAction m_Key_Board_Movement;
    private readonly InputAction m_Key_Board_WallClimb;
    private readonly InputAction m_Key_Board_WallClimbCondition;
    public struct Key_BoardActions
    {
        private @PlayerAction m_Wrapper;
        public Key_BoardActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Key_Board_Jump;
        public InputAction @Movement => m_Wrapper.m_Key_Board_Movement;
        public InputAction @WallClimb => m_Wrapper.m_Key_Board_WallClimb;
        public InputAction @WallClimbCondition => m_Wrapper.m_Key_Board_WallClimbCondition;
        public InputActionMap Get() { return m_Wrapper.m_Key_Board; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Key_BoardActions set) { return set.Get(); }
        public void AddCallbacks(IKey_BoardActions instance)
        {
            if (instance == null || m_Wrapper.m_Key_BoardActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Key_BoardActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @WallClimb.started += instance.OnWallClimb;
            @WallClimb.performed += instance.OnWallClimb;
            @WallClimb.canceled += instance.OnWallClimb;
            @WallClimbCondition.started += instance.OnWallClimbCondition;
            @WallClimbCondition.performed += instance.OnWallClimbCondition;
            @WallClimbCondition.canceled += instance.OnWallClimbCondition;
        }

        private void UnregisterCallbacks(IKey_BoardActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @WallClimb.started -= instance.OnWallClimb;
            @WallClimb.performed -= instance.OnWallClimb;
            @WallClimb.canceled -= instance.OnWallClimb;
            @WallClimbCondition.started -= instance.OnWallClimbCondition;
            @WallClimbCondition.performed -= instance.OnWallClimbCondition;
            @WallClimbCondition.canceled -= instance.OnWallClimbCondition;
        }

        public void RemoveCallbacks(IKey_BoardActions instance)
        {
            if (m_Wrapper.m_Key_BoardActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKey_BoardActions instance)
        {
            foreach (var item in m_Wrapper.m_Key_BoardActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Key_BoardActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Key_BoardActions @Key_Board => new Key_BoardActions(this);
    public interface IKey_BoardActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnWallClimb(InputAction.CallbackContext context);
        void OnWallClimbCondition(InputAction.CallbackContext context);
    }
}
