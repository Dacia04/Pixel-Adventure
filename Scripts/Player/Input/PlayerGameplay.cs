//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Game/Scripts/Player/Input/PlayerGameplay.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerGameplay: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerGameplay()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerGameplay"",
    ""maps"": [
        {
            ""name"": ""PlayerGP"",
            ""id"": ""74349a4b-f5e7-40d3-aee7-32d9e9186045"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""4d3fbeb7-850f-4f83-b641-92a4f650bcb3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""1dad3a2a-41de-48a9-b5cf-c2aa4bbc535e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Wall Climb"",
                    ""type"": ""Button"",
                    ""id"": ""b5537514-a781-4eef-b422-2f746d504484"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""8eb6d314-4bb0-416b-8c4f-0cbeebb172e0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6ab00ac7-67d3-4ff3-8781-0e51d672b7ea"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""45177f30-f819-4501-8929-96595281e577"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""02c0634a-1878-4827-a627-d044d101b826"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9c822a71-9480-4df3-82dc-65ca48c3baed"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7b2b781c-8300-4b29-a3ee-2165e253f313"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""710ec8c5-04a8-4c0b-abca-2b47aec29613"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Wall Climb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerGP
        m_PlayerGP = asset.FindActionMap("PlayerGP", throwIfNotFound: true);
        m_PlayerGP_Movement = m_PlayerGP.FindAction("Movement", throwIfNotFound: true);
        m_PlayerGP_Jump = m_PlayerGP.FindAction("Jump", throwIfNotFound: true);
        m_PlayerGP_WallClimb = m_PlayerGP.FindAction("Wall Climb", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerGP
    private readonly InputActionMap m_PlayerGP;
    private List<IPlayerGPActions> m_PlayerGPActionsCallbackInterfaces = new List<IPlayerGPActions>();
    private readonly InputAction m_PlayerGP_Movement;
    private readonly InputAction m_PlayerGP_Jump;
    private readonly InputAction m_PlayerGP_WallClimb;
    public struct PlayerGPActions
    {
        private @PlayerGameplay m_Wrapper;
        public PlayerGPActions(@PlayerGameplay wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerGP_Movement;
        public InputAction @Jump => m_Wrapper.m_PlayerGP_Jump;
        public InputAction @WallClimb => m_Wrapper.m_PlayerGP_WallClimb;
        public InputActionMap Get() { return m_Wrapper.m_PlayerGP; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerGPActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerGPActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerGPActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerGPActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @WallClimb.started += instance.OnWallClimb;
            @WallClimb.performed += instance.OnWallClimb;
            @WallClimb.canceled += instance.OnWallClimb;
        }

        private void UnregisterCallbacks(IPlayerGPActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @WallClimb.started -= instance.OnWallClimb;
            @WallClimb.performed -= instance.OnWallClimb;
            @WallClimb.canceled -= instance.OnWallClimb;
        }

        public void RemoveCallbacks(IPlayerGPActions instance)
        {
            if (m_Wrapper.m_PlayerGPActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerGPActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerGPActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerGPActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerGPActions @PlayerGP => new PlayerGPActions(this);
    public interface IPlayerGPActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnWallClimb(InputAction.CallbackContext context);
    }
}
